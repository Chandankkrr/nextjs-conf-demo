@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime;

<div class="container py-4">
    <div class="row align-items-md-stretch">
        <div class="col-md-8" style="border: 1px solid white;">
            <div class="h-100 p-5 text-white rounded-3">
                <h2>NextJS Conf_ Demo</h2>
                <p style="color: #8a8f98;">Real-time user display demo using SignalR</p>
                @if (@connectedUsersCount > 1)
                {
                    <h3>
                        @connectedUsersCount users online
                    </h3>
                } else{
                    <h3>
                        No other user online
                    </h3>
                    <p style="color: #8a8f98;">
                        Open this page in a new tab to see real-time cursor update
                    </p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection hubConnection;
    private int connectedUsersCount;
    private static Func<Cursor, Task> func;

    public record Cursor
    {
        public string X { get; set; }

        public string Y { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/clienthub"))
            .Build();

        hubConnection.On<string, string, string>("ReceiveMessage", (connectionId, x, y) =>
        {
            JSRuntime.InvokeVoidAsync("nextjs.updateCursor", connectionId, x, y);
            StateHasChanged();
        });

        hubConnection.On<string, int>("UserConnected", (connectionId, connectedUserIdsCount) =>
        {
            connectedUsersCount = connectedUserIdsCount;
            JSRuntime.InvokeVoidAsync("nextjs.onUserConnected", connectionId);

            StateHasChanged();
        });

        hubConnection.On<string, int>("UserDisconnected", (connectionId, connectedUserIdsCount) =>
        {
            connectedUsersCount = connectedUserIdsCount;
            JSRuntime.InvokeVoidAsync("nextjs.onUserDisconnected", connectionId);

            StateHasChanged();
        });

        hubConnection.On<List<string>>("LoadAllConnectedUsers", (connectedUserIds) =>
        {
            connectedUsersCount = connectedUserIds.Count;
            JSRuntime.InvokeVoidAsync("nextjs.loadAllConnectedUsers", connectedUserIds);

            StateHasChanged();
        });

        func = new Func<Cursor, Task>((cursor) => SendMouseEvents(cursor));

        await hubConnection.StartAsync();

        await JSRuntime.InvokeVoidAsync("nextjs.addMouseEventListener");
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    [JSInvokable]
    public static void CaptureMouseEvents(string data)
    {
        var cursorInfo = System.Text.Json.JsonSerializer.Deserialize<Cursor>(data);

        func(cursorInfo);
    }

    public async Task SendMouseEvents(Cursor cursorInfo)
    {
        await hubConnection.SendAsync("SendMessage", cursorInfo.X, cursorInfo.Y);
    }
}
